import { Primer, toChromaArray } from "../primer.js";
import { Theme, ThemeColors, ThemeType, TokenColor } from "../types.js";
import chroma from "chroma-js";

type ColorOpts = {
	[T in ThemeType]: chroma.Color;
};

/**
 * @param opts available colors to select from
 * @param ttype theme type
 * @returns the selected color based on the given theme type
 */
function pickColor(opts: ColorOpts, ttype: ThemeType): chroma.Color {
	switch (ttype) {
		case "light":
			return opts.light;
		case "dark":
			return opts.dark;
	}
}

/**
 * @param ttype theme type
 * @returns the corresponding GitHub color primer of the given type
 */
function getPrimer(ttype: ThemeType): Primer {
	// Default primer based on `GitHub Dark`
	// Reference: https://github.com/primer/github-vscode-theme
	const basePrimer = Primer.fromScale({
		black: chroma("#1b1f23"),
		white: chroma("#ffffff"),
		gray: toChromaArray([
			"#fafbfc",
			"#f6f8fa",
			"#e1e4e8",
			"#d1d5da",
			"#959da5",
			"#6a737d",
			"#586069",
			"#444d56",
			"#2f363d",
			"#24292e",
		]),
		blue: toChromaArray([
			"#f1f8ff",
			"#dbedff",
			"#c8e1ff",
			"#79b8ff",
			"#2188ff",
			"#0366d6",
			"#005cc5",
			"#044289",
			"#032f62",
			"#05264c",
		]),
		green: toChromaArray([
			"#f0fff4",
			"#dcffe4",
			"#bef5cb",
			"#85e89d",
			"#34d058",
			"#28a745",
			"#22863a",
			"#176f2c",
			"#165c26",
			"#144620",
		]),
		yellow: toChromaArray([
			"#fffdef",
			"#fffbdd",
			"#fff5b1",
			"#ffea7f",
			"#ffdf5d",
			"#ffd33d",
			"#f9c513",
			"#dbab09",
			"#b08800",
			"#735c0f",
		]),
		orange: toChromaArray([
			"#fff8f2",
			"#ffebda",
			"#ffd1ac",
			"#ffab70",
			"#fb8532",
			"#f66a0a",
			"#e36209",
			"#d15704",
			"#c24e00",
			"#a04100",
		]),
		red: toChromaArray([
			"#ffeef0",
			"#ffdce0",
			"#fdaeb7",
			"#f97583",
			"#ea4a5a",
			"#d73a49",
			"#cb2431",
			"#b31d28",
			"#9e1c23",
			"#86181d",
		]),
		purple: toChromaArray([
			"#f5f0ff",
			"#e6dcfd",
			"#d1bcf9",
			"#b392f0",
			"#8a63d2",
			"#6f42c1",
			"#5a32a3",
			"#4c2889",
			"#3a1d6e",
			"#29134e",
		]),
		pink: toChromaArray([
			"#ffeef8",
			"#fedbf0",
			"#f9b3dd",
			"#f692ce",
			"#ec6cb9",
			"#ea4aaa",
			"#d03592",
			"#b93a86",
			"#99306f",
			"#6d224f",
		]),
	});

	switch (ttype) {
		case "light":
			return basePrimer;
		case "dark":
			// Auto-generate the dark theme by reversing light to dark colors
			return basePrimer.reverse();
	}
}

/**
 * @param ttype theme type
 * @returns an experimental color primer of the original GitHub classic theme
 * 			generated by programatically computing the color scales
 */
function getExperimentalPrimer(ttype: ThemeType): Primer {
	const basePrimer = Primer.fromRange({
		black: chroma("#1b1f23"),
		white: chroma("#ffffff"),
		gray: [chroma("#fafbfc"), chroma("#24292e")],
		blue: [chroma("#f1f8ff"), chroma("#05264c")],
		green: [chroma("#f0fff4"), chroma("#144620")],
		yellow: [chroma("#fffdef"), chroma("#735c0f")],
		orange: [chroma("#fff8f2"), chroma("#a04100")],
		red: [chroma("#ffeef0"), chroma("#86181d")],
		purple: [chroma("#f5f0ff"), chroma("#29134e")],
		pink: [chroma("#ffeef8"), chroma("#6d224f")],
	});

	switch (ttype) {
		case "light":
			return basePrimer;
		case "dark":
			return basePrimer.reverse();
	}
}

/**
 * @param ttype theme type
 * @returns the corresponding GitHub color scheme of the given theme type
 */
function getColors(ttype: ThemeType): ThemeColors {
	const primer = getPrimer(ttype);

	const pick = (opts: ColorOpts) => pickColor(opts, ttype);

	const workbenchForeground = pick({
		light: primer.gray[8],
		dark: primer.gray[7],
	});

	const editorForeground = pick({
		light: primer.gray[9],
		dark: primer.gray[7],
	});

	return {
		// Base colors
		focusBorder: pick({ light: primer.blue[4], dark: primer.blue[3] }),
		foreground: pick({ light: primer.gray[7], dark: primer.gray[6] }),
		descriptionForeground: primer.gray[5],
		errorForeground: primer.red[6],

		// Text colors
		"textBlockQuote.background": primer.gray[0],
		"textBlockQuote.border": primer.gray[2],
		"textCodeBlock.background": primer.gray[1],
		"textLink.foreground": pick({
			light: primer.blue[5],
			dark: primer.blue[6],
		}),
		"textLink.activeForeground": pick({
			light: primer.blue[6],
			dark: primer.blue[7],
		}),
		"textPreformat.foreground": primer.gray[6],
		"textSeparator.foreground": primer.gray[3],

		// Button control
		"button.background": pick({
			light: chroma("#159739"),
			dark: primer.green[2],
		}),
		"button.foreground": pick({ light: primer.white, dark: primer.green[8] }),
		"button.hoverBackground": pick({
			light: chroma("#138934"),
			dark: primer.green[3],
		}),
		"button.secondaryBackground": pick({
			light: primer.gray[2],
			dark: primer.gray[2],
		}),
		"button.secondaryForeground": primer.black,
		"button.secondaryHoverBackground": pick({
			light: primer.gray[3],
			dark: primer.gray[3],
		}),
		"checkbox.background": pick({
			light: primer.gray[0],
			dark: primer.gray[2],
		}),
		"checkbox.border": pick({ light: primer.gray[3], dark: primer.white }),

		// Dropdown control
		"dropdown.background": pick({
			light: primer.gray[0],
			dark: primer.gray[1],
		}),
		"dropdown.foreground": workbenchForeground,
		"dropdown.border": pick({ light: primer.gray[2], dark: primer.white }),
		"dropdown.listBackground": pick({
			light: primer.white,
			dark: primer.gray[0],
		}),

		// Input control
		"input.background": pick({ light: primer.gray[0], dark: primer.gray[1] }),
		"input.foreground": workbenchForeground,
		"input.border": pick({ light: primer.gray[2], dark: primer.white }),
		"input.placeholderForeground": pick({
			light: primer.gray[4],
			dark: primer.gray[5],
		}),

		// Scrollbar control
		"scrollbar.shadow": pick({
			light: chroma("#6a737d33"),
			dark: chroma("#0008"),
		}),
		"scrollbarSlider.background": pick({
			light: chroma("#959da533"),
			dark: chroma("#6a737d33"),
		}),
		"scrollbarSlider.activeBackground": pick({
			light: chroma("#959da588"),
			dark: chroma("#6a737d88"),
		}),
		"scrollbarSlider.hoverBackground": pick({
			light: chroma("#959da544"),
			dark: chroma("#6a737d44"),
		}),

		// Badge
		"badge.background": pick({ light: primer.blue[1], dark: primer.blue[2] }),
		"badge.foreground": pick({ light: primer.blue[6], dark: primer.blue[7] }),

		// Progress bar
		"progressBar.background": primer.blue[4],

		// Lists and trees
		"list.focusBackground": pick({
			light: chroma("#cce5ff"),
			dark: primer.blue[2],
		}),
		"list.hoverBackground": pick({
			light: chroma("#ebf0f4"),
			dark: chroma("#282e34"),
		}),
		"list.activeSelectionBackground": pick({
			light: chroma("#e2e5e9"),
			dark: chroma("#39414a"),
		}),
		"list.inactiveSelectionBackground": pick({
			light: chroma("#e8eaed"),
			dark: chroma("#282e34"),
		}),
		"list.inactiveFocusBackground": pick({
			light: primer.blue[1],
			dark: chroma("#1d2d3e"),
		}),
		"list.hoverForeground": workbenchForeground,
		"list.activeSelectionForeground": workbenchForeground,
		"list.inactiveSelectionForeground": workbenchForeground,
		"tree.indentGuidesStroke": pick({
			light: primer.gray[2],
			dark: primer.gray[1],
		}),

		// Activity bar
		"activityBar.background": pick({
			light: primer.white,
			dark: primer.gray[0],
		}),
		"activityBar.foreground": workbenchForeground,
		"activityBar.inactiveForeground": primer.gray[4],
		"activityBar.border": pick({ light: primer.gray[2], dark: primer.white }),
		"activityBar.activeBorder": chroma("#f9826c"),
		"activityBarBadge.background": pick({
			light: primer.blue[4],
			dark: primer.blue[4],
		}),
		"activityBarBadge.foreground": pick({
			light: primer.white,
			dark: primer.black,
		}),

		// Side bar
		"sideBar.background": pick({
			light: primer.gray[1],
			dark: chroma("#1f2428"),
		}),
		"sideBar.foreground": primer.gray[6],
		"sideBar.border": pick({ light: primer.gray[2], dark: primer.white }),
		"sideBarTitle.foreground": workbenchForeground,
		"sideBarSectionHeader.background": pick({
			light: primer.gray[1],
			dark: chroma("#1f2428"),
		}),
		"sideBarSectionHeader.border": pick({
			light: primer.gray[2],
			dark: primer.white,
		}),
		"sideBarSectionHeader.foreground": workbenchForeground,

		// Editor group & tabs
		"editorGroup.border": pick({ light: primer.gray[2], dark: primer.white }),
		"editorGroupHeader.tabsBackground": pick({
			light: primer.gray[1],
			dark: chroma("#1f2428"),
		}),
		"editorGroupHeader.tabsBorder": pick({
			light: primer.gray[2],
			dark: primer.white,
		}),
		"tab.activeBackground": pick({
			light: primer.white,
			dark: primer.gray[0],
		}),
		"tab.hoverBackground": pick({
			light: primer.white,
			dark: primer.gray[0],
		}),
		"tab.inactiveBackground": pick({
			light: primer.gray[1],
			dark: chroma("#1f2428"),
		}),
		"tab.unfocusedHoverBackground": pick({
			light: primer.white,
			dark: primer.gray[0],
		}),
		"tab.activeForeground": workbenchForeground,
		"tab.inactiveForeground": primer.gray[5],
		"tab.border": pick({ light: primer.gray[2], dark: primer.white }),
		"tab.activeBorder": pick({ light: primer.white, dark: primer.gray[0] }),
		"tab.unfocusedActiveBorder": pick({
			light: primer.white,
			dark: primer.gray[0],
		}),
		"tab.activeBorderTop": chroma("#f9826c"),
		"tab.unfocusedActiveBorderTop": pick({
			light: primer.gray[2],
			dark: primer.white,
		}),

		// Editor colors
		"editor.background": pick({ light: primer.white, dark: primer.gray[0] }),
		"editor.foreground": editorForeground,
		"editorLineNumber.foreground": pick({
			light: chroma("#1b1f234d"),
			dark: primer.gray[2],
		}),
		"editorLineNumber.activeForeground": editorForeground,
		"editorCursor.foreground": primer.blue[7],
		"editor.selectionBackground": pick({
			light: chroma("#0366d625"),
			dark: chroma("#3392FF44"),
		}),
		"editor.inactiveSelectionBackground": pick({
			light: chroma("#0366d611"),
			dark: chroma("#3392FF22"),
		}),
		"editor.selectionHighlightBackground": pick({
			light: chroma("#34d05840"),
			dark: chroma("#17E5E633"),
		}),
		"editor.selectionHighlightBorder": pick({
			light: chroma("#34d05800"),
			dark: chroma("#17E5E600"),
		}),
		"editor.wordHighlightBackground": pick({
			light: chroma("#34d05800"),
			dark: chroma("#17E5E600"),
		}),
		"editor.wordHighlightBorder": pick({
			light: chroma("#24943e99"),
			dark: chroma("#17E5E699"),
		}),
		"editor.wordHighlightStrongBackground": pick({
			light: chroma("#34d05800"),
			dark: chroma("#17E5E600"),
		}),
		"editor.wordHighlightStrongBorder": pick({
			light: chroma("#24943e50"),
			dark: chroma("#17E5E666"),
		}),
		"editor.findMatchBackground": pick({
			light: primer.yellow[4],
			dark: chroma("#ffd33d44"),
		}),
		"editor.findMatchHighlightBackground": pick({
			light: chroma("#ffdf5d66"),
			dark: chroma("#ffd33d22"),
		}),
		"editor.lineHighlightBackground": pick({
			light: primer.gray[1],
			dark: chroma("#2b3036"),
		}),
		"editorWhitespace.foreground": pick({
			light: primer.gray[3],
			dark: primer.gray[2],
		}),
		"editorIndentGuide.background": pick({
			light: chroma("#eff2f6"),
			dark: primer.gray[1],
		}),
		"editorIndentGuide.activeBackground": pick({
			light: chroma("#d7dbe0"),
			dark: primer.gray[2],
		}),
		"editor.linkedEditingBackground": pick({
			light: chroma("#0366d611"),
			dark: chroma("#3392FF22"),
		}),
		"editorBracketMatch.background": pick({
			light: chroma("#34d05840"),
			dark: chroma("#17E5E650"),
		}),
		"editorBracketMatch.border": pick({
			light: chroma("#34d05800"),
			dark: chroma("#17E5E600"),
		}),
		"editorBracketHighlight.foreground1": primer.blue[6],
		"editorBracketHighlight.foreground2": primer.orange[6],
		"editorBracketHighlight.foreground3": primer.purple[6],
		"editorBracketHighlight.foreground4": primer.blue[6],
		"editorBracketHighlight.foreground5": primer.orange[6],
		"editorBracketHighlight.foreground6": primer.purple[6],
		"editor.foldBackground": pick({
			light: chroma("#d1d5da11"),
			dark: chroma("#58606915"),
		}), // needs opacity
		"editorOverviewRuler.border": primer.white,
		"editorError.foreground": primer.red[6],
		"editorWarning.foreground": primer.yellow[6],
		"editorGutter.modifiedBackground": pick({
			light: primer.blue[4],
			dark: primer.blue[5],
		}),
		"editorGutter.addedBackground": pick({
			light: primer.green[5],
			dark: primer.green[4],
		}),
		"editorGutter.deletedBackground": primer.red[5],

		// Diff editor colors
		"diffEditor.insertedTextBackground": pick({
			light: chroma("#34d05822"),
			dark: chroma("#28a74530"),
		}),
		"diffEditor.removedTextBackground": pick({
			light: chroma("#d73a4922"),
			dark: chroma("#d73a4930"),
		}),

		// Editor widget colors
		"editorWidget.background": pick({
			light: primer.gray[1],
			dark: chroma("#1f2428"),
		}),

		// Peek view colors
		"peekViewEditor.background": chroma("#1f242888"),
		"peekViewEditor.matchHighlightBackground": chroma("#ffd33d33"),
		"peekViewResult.background": chroma("#1f2428"),
		"peekViewResult.matchHighlightBackground": chroma("#ffd33d33"),

		// Panel colors
		"panel.background": pick({
			light: primer.gray[1],
			dark: chroma("#1f2428"),
		}),
		"panel.border": pick({ light: primer.gray[2], dark: primer.white }),
		"panelTitle.activeBorder": chroma("#f9826c"),
		"panelTitle.activeForeground": workbenchForeground,
		"panelTitle.inactiveForeground": primer.gray[5],
		"panelInput.border": pick({
			light: primer.gray[2],
			dark: primer.gray[1],
		}),

		// Status bar colors
		"statusBar.background": pick({
			light: primer.white,
			dark: primer.gray[0],
		}),
		"statusBar.foreground": primer.gray[6],
		"statusBar.border": pick({ light: primer.gray[2], dark: primer.white }),
		"statusBar.debuggingBackground": pick({
			light: chroma("#f9826c"),
			dark: chroma("#931b06"), // Variant of #f9826c (by inverting L of the HSL)
		}),
		"statusBar.debuggingForeground": pick({
			light: primer.white,
			dark: primer.black,
		}),
		"statusBar.noFolderBackground": pick({
			light: primer.white,
			dark: primer.gray[0],
		}),
		"statusBarItem.prominentBackground": pick({
			light: chroma("#e8eaed"),
			dark: chroma("#282e34"),
		}),
		"statusBarItem.remoteForeground": primer.gray[6],
		"statusBarItem.remoteBackground": pick({
			light: primer.white,
			dark: primer.gray[0],
		}),

		// Title bar colors
		"titleBar.activeForeground": workbenchForeground,
		"titleBar.activeBackground": pick({
			light: primer.white,
			dark: primer.gray[0],
		}),
		"titleBar.inactiveForeground": primer.gray[5],
		"titleBar.inactiveBackground": pick({
			light: primer.gray[1],
			dark: chroma("#1f2428"),
		}),
		"titleBar.border": pick({ light: primer.gray[2], dark: primer.white }),

		// Notification colors
		"notificationCenterHeader.foreground": primer.gray[5],
		"notificationCenterHeader.background": pick({
			light: primer.gray[2],
			dark: primer.gray[0],
		}),
		"notifications.foreground": workbenchForeground,
		"notifications.background": pick({
			light: primer.gray[0],
			dark: primer.gray[1],
		}),
		"notifications.border": pick({
			light: primer.gray[2],
			dark: primer.white,
		}),
		"notificationsErrorIcon.foreground": primer.red[5],
		"notificationsWarningIcon.foreground": primer.orange[6],
		"notificationsInfoIcon.foreground": primer.blue[6],

		// Quick picker colors
		"pickerGroup.border": primer.gray[2],
		"pickerGroup.foreground": workbenchForeground,
		"quickInput.background": primer.gray[0],
		"quickInput.foreground": workbenchForeground,

		// Integrated terminal colors
		"terminal.foreground": primer.gray[6],
		"terminalCursor.background": primer.gray[3],
		"terminalCursor.foreground": primer.blue[6],
		"terminal.tab.activeBorder": chroma("#f9826c"),

		// Test ANSI colors with:
		// echo -e "\033[0mNC (No color)"
		// echo -e "\033[1;37mWHITE\t\033[0;30mBLACK"
		// echo -e "\033[0;34mBLUE\t\033[1;34mLIGHT_BLUE"
		// echo -e "\033[0;32mGREEN\t\033[1;32mLIGHT_GREEN"
		// echo -e "\033[0;36mCYAN\t\033[1;36mLIGHT_CYAN"
		// echo -e "\033[0;31mRED\t\033[1;31mLIGHT_RED"
		// echo -e "\033[0;35mPURPLE\t\033[1;35mLIGHT_PURPLE"
		// echo -e "\033[0;33mYELLOW\t\033[1;33mLIGHT_YELLOW"
		// echo -e "\033[1;30mGRAY\t\033[0;37mLIGHT_GRAY"

		"terminal.ansiBrightWhite": pick({
			light: primer.gray[3],
			dark: primer.gray[9],
		}), // WHITE
		"terminal.ansiWhite": pick({
			light: primer.gray[5],
			dark: primer.gray[6],
		}), // LIGHT_GRAY
		"terminal.ansiBrightBlack": pick({
			light: primer.gray[4],
			dark: primer.gray[5],
		}), // GRAY
		"terminal.ansiBlack": pick({
			light: primer.gray[9],
			dark: primer.gray[3],
		}), // BLACK
		"terminal.ansiBlue": primer.blue[5],
		"terminal.ansiBrightBlue": primer.blue[6],
		"terminal.ansiGreen": primer.green[5],
		"terminal.ansiBrightGreen": primer.green[6],
		"terminal.ansiCyan": pick({
			light: chroma("#1b7c83"),
			dark: chroma("#39c5cf"),
		}),
		"terminal.ansiBrightCyan": pick({
			light: chroma("#3192aa"),
			dark: chroma("#56d4dd"),
		}),
		"terminal.ansiRed": primer.red[5],
		"terminal.ansiBrightRed": primer.red[6],
		"terminal.ansiMagenta": primer.purple[6],
		"terminal.ansiBrightMagenta": primer.purple[6],
		"terminal.ansiYellow": pick({
			light: primer.yellow[7],
			dark: primer.yellow[6],
		}),
		"terminal.ansiBrightYellow": pick({
			light: primer.yellow[8],
			dark: primer.yellow[6],
		}),

		// Debug colors
		"debugToolBar.background": pick({
			light: primer.white,
			dark: chroma("#2b3036"),
		}),
		"editor.stackFrameHighlightBackground": pick({
			light: chroma("#ffd33d33"),
			dark: chroma("#C6902625"),
		}), // needs opacity (yellow)
		"editor.focusedStackFrameHighlightBackground": pick({
			light: chroma("#28a74525"),
			dark: chroma("#2b6a3033"),
		}), // needs opacity (green)

		// Git colors
		"gitDecoration.addedResourceForeground": primer.green[5],
		"gitDecoration.modifiedResourceForeground": primer.blue[6],
		"gitDecoration.deletedResourceForeground": primer.red[5],
		"gitDecoration.untrackedResourceForeground": primer.green[5],
		"gitDecoration.ignoredResourceForeground": primer.gray[4],
		"gitDecoration.conflictingResourceForeground": primer.orange[6],
		"gitDecoration.submoduleResourceForeground": primer.gray[4],

		// Settings editor colors
		"settings.headerForeground": workbenchForeground,
		"settings.modifiedItemIndicator": primer.blue[4],

		// Breadcrumbs colors
		"breadcrumb.foreground": primer.gray[5],
		"breadcrumb.focusForeground": workbenchForeground,
		"breadcrumb.activeSelectionForeground": primer.gray[6],
		"breadcrumbPicker.background": pick({
			light: primer.gray[0],
			dark: chroma("#2b3036"),
		}),
	};
}

/**
 * @param ttype theme type
 * @returns the corresponding GitHub token colors of the given theme type
 */
function getTokenColors(ttype: ThemeType): ReadonlyArray<TokenColor> {
	const primer = getPrimer(ttype);

	const pick = (opts: ColorOpts) => pickColor(opts, ttype);

	const editorForeground = pick({
		light: primer.gray[9],
		dark: primer.gray[7],
	});

	return [
		{
			scope: ["comment", "punctuation.definition.comment", "string.comment"],
			settings: {
				foreground: pick({ light: primer.gray[5], dark: primer.gray[4] }),
			},
		},
		{
			scope: [
				"constant",
				"entity.name.constant",
				"variable.other.constant",
				"variable.other.enummember",
				"variable.language",
			],
			settings: {
				foreground: primer.blue[6],
			},
		},
		{
			scope: ["entity", "entity.name"],
			settings: {
				foreground: pick({ light: primer.purple[5], dark: primer.purple[6] }),
			},
		},
		{
			scope: "variable.parameter.function",
			settings: {
				foreground: editorForeground,
			},
		},
		{
			scope: "entity.name.tag",
			settings: {
				foreground: primer.green[6],
			},
		},
		{
			scope: "keyword",
			settings: {
				foreground: pick({ light: primer.red[5], dark: primer.red[6] }),
			},
		},
		{
			scope: ["storage", "storage.type"],
			settings: {
				foreground: pick({ light: primer.red[5], dark: primer.red[6] }),
			},
		},
		{
			scope: [
				"storage.modifier.package",
				"storage.modifier.import",
				"storage.type.java",
			],
			settings: {
				foreground: editorForeground,
			},
		},
		{
			scope: [
				"string",
				"punctuation.definition.string",
				"string punctuation.section.embedded source",
			],
			settings: {
				foreground: pick({ light: primer.blue[8], dark: chroma("#9ecbff") }),
			},
		},
		{
			scope: "support",
			settings: {
				foreground: primer.blue[6],
			},
		},
		{
			scope: "meta.property-name",
			settings: {
				foreground: primer.blue[6],
			},
		},
		{
			scope: "variable",
			settings: {
				foreground: primer.orange[6],
			},
		},
		{
			scope: "variable.other",
			settings: {
				foreground: editorForeground,
			},
		},
		{
			scope: "invalid.broken",
			settings: {
				fontStyle: "italic",
				foreground: primer.red[7],
			},
		},
		{
			scope: "invalid.deprecated",
			settings: {
				fontStyle: "italic",
				foreground: primer.red[7],
			},
		},
		{
			scope: "invalid.illegal",
			settings: {
				fontStyle: "italic",
				foreground: primer.red[7],
			},
		},
		{
			scope: "invalid.unimplemented",
			settings: {
				fontStyle: "italic",
				foreground: primer.red[7],
			},
		},
		{
			scope: "carriage-return",
			settings: {
				fontStyle: "italic underline",
				background: pick({ light: primer.red[5], dark: primer.red[6] }),
				foreground: primer.gray[0],
				content: "^M",
			},
		},
		{
			scope: "message.error",
			settings: {
				foreground: primer.red[7],
			},
		},
		{
			scope: "string variable",
			settings: {
				foreground: primer.blue[6],
			},
		},
		{
			scope: ["source.regexp", "string.regexp"],
			settings: {
				foreground: primer.blue[8],
			},
		},
		{
			scope: [
				"string.regexp.character-class",
				"string.regexp constant.character.escape",
				"string.regexp source.ruby.embedded",
				"string.regexp string.regexp.arbitrary-repitition",
			],
			settings: {
				foreground: primer.blue[8],
			},
		},
		{
			scope: "string.regexp constant.character.escape",
			settings: {
				fontStyle: "bold",
				foreground: primer.green[6],
			},
		},
		{
			scope: "support.constant",
			settings: {
				foreground: primer.blue[6],
			},
		},
		{
			scope: "support.variable",
			settings: {
				foreground: primer.blue[6],
			},
		},
		{
			scope: "meta.module-reference",
			settings: {
				foreground: primer.blue[6],
			},
		},
		{
			scope: "punctuation.definition.list.begin.markdown",
			settings: {
				foreground: primer.orange[6],
			},
		},
		{
			scope: ["markup.heading", "markup.heading entity.name"],
			settings: {
				fontStyle: "bold",
				foreground: primer.blue[6],
			},
		},
		{
			scope: "markup.quote",
			settings: {
				foreground: primer.green[6],
			},
		},
		{
			scope: "markup.italic",
			settings: {
				fontStyle: "italic",
				foreground: editorForeground,
			},
		},
		{
			scope: "markup.bold",
			settings: {
				fontStyle: "bold",
				foreground: editorForeground,
			},
		},
		{
			scope: ["markup.underline"],
			settings: {
				fontStyle: "underline",
			},
		},
		{
			scope: ["markup.strikethrough"],
			settings: {
				fontStyle: "strikethrough",
			},
		},
		{
			scope: "markup.inline.raw",
			settings: {
				foreground: primer.blue[6],
			},
		},
		{
			scope: [
				"markup.deleted",
				"meta.diff.header.from-file",
				"punctuation.definition.deleted",
			],
			settings: {
				background: primer.red[0],
				foreground: primer.red[7],
			},
		},
		{
			scope: [
				"markup.inserted",
				"meta.diff.header.to-file",
				"punctuation.definition.inserted",
			],
			settings: {
				background: primer.green[0],
				foreground: primer.green[6],
			},
		},
		{
			scope: ["markup.changed", "punctuation.definition.changed"],
			settings: {
				background: primer.orange[1],
				foreground: primer.orange[6],
			},
		},
		{
			scope: ["markup.ignored", "markup.untracked"],
			settings: {
				foreground: primer.gray[1],
				background: primer.blue[6],
			},
		},
		{
			scope: "meta.diff.range",
			settings: {
				foreground: pick({ light: primer.purple[5], dark: primer.purple[6] }),
				fontStyle: "bold",
			},
		},
		{
			scope: "meta.diff.header",
			settings: {
				foreground: primer.blue[6],
			},
		},
		{
			scope: "meta.separator",
			settings: {
				fontStyle: "bold",
				foreground: primer.blue[6],
			},
		},
		{
			scope: "meta.output",
			settings: {
				foreground: primer.blue[6],
			},
		},
		{
			scope: [
				"brackethighlighter.tag",
				"brackethighlighter.curly",
				"brackethighlighter.round",
				"brackethighlighter.square",
				"brackethighlighter.angle",
				"brackethighlighter.quote",
			],
			settings: {
				foreground: primer.gray[6],
			},
		},
		{
			scope: "brackethighlighter.unmatched",
			settings: {
				foreground: primer.red[7],
			},
		},
		{
			scope: ["constant.other.reference.link", "string.other.link"],
			settings: {
				foreground: primer.blue[8],
				fontStyle: "underline",
			},
		},
	];
}

/**
 * GitHub Light (Classic) theme
 */
export const GITHUB_LIGHT: Theme = {
	$schema: "vscode://schemas/color-theme",
	type: "light",
	name: "GitHub Light",
	colors: getColors("light"),
	tokenColors: getTokenColors("light"),
	semanticHighlighting: true,
};

/**
 * GitHub Dark (Classic) theme
 */
export const GITHUB_DARK: Theme = {
	$schema: "vscode://schemas/color-theme",
	type: "dark",
	name: "GitHub Dark",
	colors: getColors("dark"),
	tokenColors: getTokenColors("dark"),
	semanticHighlighting: true,
};
